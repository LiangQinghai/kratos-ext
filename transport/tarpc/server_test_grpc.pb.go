// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: server_test.proto

package tarpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestGrpcService_Echo_FullMethodName = "/tarpc.TestGrpcService/Echo"
)

// TestGrpcServiceClient is the client API for TestGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestGrpcServiceClient interface {
	Echo(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReply, error)
}

type testGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestGrpcServiceClient(cc grpc.ClientConnInterface) TestGrpcServiceClient {
	return &testGrpcServiceClient{cc}
}

func (c *testGrpcServiceClient) Echo(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, TestGrpcService_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestGrpcServiceServer is the server API for TestGrpcService service.
// All implementations must embed UnimplementedTestGrpcServiceServer
// for forward compatibility
type TestGrpcServiceServer interface {
	Echo(context.Context, *TestReq) (*TestReply, error)
	mustEmbedUnimplementedTestGrpcServiceServer()
}

// UnimplementedTestGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestGrpcServiceServer struct {
}

func (UnimplementedTestGrpcServiceServer) Echo(context.Context, *TestReq) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTestGrpcServiceServer) mustEmbedUnimplementedTestGrpcServiceServer() {}

// UnsafeTestGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestGrpcServiceServer will
// result in compilation errors.
type UnsafeTestGrpcServiceServer interface {
	mustEmbedUnimplementedTestGrpcServiceServer()
}

func RegisterTestGrpcServiceServer(s grpc.ServiceRegistrar, srv TestGrpcServiceServer) {
	s.RegisterService(&TestGrpcService_ServiceDesc, srv)
}

func _TestGrpcService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestGrpcServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestGrpcService_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestGrpcServiceServer).Echo(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TestGrpcService_ServiceDesc is the grpc.ServiceDesc for TestGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tarpc.TestGrpcService",
	HandlerType: (*TestGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestGrpcService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_test.proto",
}
